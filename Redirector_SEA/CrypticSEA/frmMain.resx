<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAvLy8AMDAwADExMQAyMjIAMzMzADQ0NAA1NTUAODg4ADk5OQA6OjoAOzs7ADw8PAA9PT0APz8/AEBA
        QABBQUEAQkJCAENDQwBEREQARUVFAEZGRgBISEgASUlJAEpKSgBLS0sATExMAE1NTQBOTk4AT09PAFBQ
        UABRUVEAUlJSAFNTUwBUVFQAVVVVAFZWVgBXV1cAWFhYAFlZWQBaWloAW1tbAFxcXABdXV0AXl5eAF9f
        XwBgYGAAYWFhAGJiYgBjY2MAZGRkAGVlZQBmZmYAZ2dnAGlpaQBqamoAa2trAGxsbABtbW0Abm5uAG9v
        bwBwcHAAcXFxAHJycgBzc3MAdHR0AHZ2dgB3d3cAeHh4AHl5eQB6enoAe3t7AHx8fAB+fn4Af39/AICA
        gACBgYEAgoKCAIODgwCEhIQAhYWFAIeHhwCIiIgAiYmJAIqKigCLi4sAjIyMAI2NjQCOjo4Aj4+PAJCQ
        kACRkZEAk5OTAJWVlQCWlpYAl5eXAJycnACenp4AwMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYmJiYmJiYmJiYmJiQjMnFxcaGhViYmJiYmJiYmJiYmJiYmJiYmJiYmJCMyskJCUiHRURDQkI
        YmJiYmJiYmJiYmJiYmJiYmJXNzQ3NzIuLCkkIBwXEQsDCGJiYmJiYmJiYmJiYmJiRj9APzo6NzMwLSkm
        IhwYEQ0GAxViYmJiYmJiYmJiYkVHR0dDQD05NzQxLCkmIBwZFA0HAwJiYmJiYmJiYmJOTExMR0dBQT07
        NzQxLCkkIBwVEQwGAwZiYmJiYmJiV1BTUExMSUVEQD45NjQxKikkHhgVDwoDAB9iYmJiYl9RWFhUUk9M
        SkVDQD46NjIuKiUjHRkUDQgEAmJiYmJiWFdYVFVUVFJPS0ZDQDw4NDEsKiQhHBUQDAYDCGJiYl9YV1dV
        VFRTU1BQS0ZDPzo2Mi8qJyMdGBMNCAMCYmJiW1ZTWFVTU1JSUVFQTUZAPDg0MS4qJSEcFRAKBQAVYmJZ
        WFdZVlNTU1NTUFFQS0VAOzYyLyonIx0YFA0HAwZiYFlXV1hSUlJSUVJRUFFQSEM/ODQxLiokIRsVDggE
        AGJdWVhYVlJSVVNSUlFPUFFNRUA6NjIvKiUjHBUQCwUDEltZWFlWVlVUUlFSUlFRUVBLQzw2NTAsKSMd
        GBMNBgAfW1lZV1ZUV1JRUlJRUVFRUU1FPzg1MS4qJB4bEw0HABVbWVlWWVNTV15eU1FSUVFRUEhAOzYy
        LyolIRwVDwcAFVtZWVZZVVRgYWFeUlFRUVBQS0M/ODQwLCcjHBURCAEfXllaWVdVVWBhYWBVUlBRUVFN
        RT84NDEsKSMdGRAJARVgVVpZV1VVXmFhYFRSUFFRUU1FPzo1MS4pJB0ZEAkCYmJWWldWVlZXXmBZUlFS
        UVFRTUZAPDYyLiokHRkRCQZiYl5aVllZVlRTVVZSUlJRUFFNRkA8NjIuKiQeGRAHLGJiXlpZWVZUWVVR
        VFNTUlFSUU1GQDw2MzAqJB4YDwNiYmJiXFVaV1ZZVlNTVFJRU1FQS0ZAPjg0MCokHhgNDGJiYmJgWVlV
        V1ZWVlZSUlNSUVBLRUA9ODQwKSQcFghiYmJiYmJbWVlZWVZWVlVTUlFST0pEQT02NC4pIxwPFWJiYmJi
        YmJbW1lYWFhXVlVUU1JMSURBPTYzLSgiFxpiYmJiYmJiYmJbWVlXVlhVVVVUUkxJREA7NzIsJRsXYmJi
        YmJiYmJiYmJdWVlYVFdXVVJQTEVBQDo3MiscJ2JiYmJiYmJiYmJiYmJgWFdVWFVTUExHR0M/OjImI0Ji
        YmJiYmJiYmJiYmJiYmJiX1hUUlJQTElHPzowM0JiYmJiYmJiYmJiYmJiYmJiYmJiYl9XV05FRT9CQmJi
        YmJiYmJiYmJiYv/wD///gAP//gAA//wAAD/4AAAf8AAAD+AAAAfAAAAHwAAAA4AAAAOAAAABgAAAAQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAYAAAAGAAAADwAAAA8AAAAfgAAAH8AAAD/gA
        AB/8AAA//gAAf/+AAf//4A//
</value>
  </data>
</root>